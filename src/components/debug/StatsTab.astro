---
// StatsTab.astro - Stats tab content for the debug panel
import * as DataManager from '../../data/enhancedDataManager';

// Props
interface Props {
  decisions?: any[];
  nodes?: any[];
  edges?: any[];
  completedDecisions?: any[];
}

// Default props
const {
  decisions = [],
  nodes = [],
  edges = [],
  completedDecisions = []
} = Astro.props;

// Get categories from DataManager
const categories = DataManager.decisionsByCategory || {};
---

<div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
  <div style={{ marginBottom: '10px' }}>
    <h3>Decision Tree Stats</h3>
  </div>

  <div style={{ flex: 1, overflowY: 'auto' }}>
    <div style={{ marginBottom: '10px' }}>
      <div>
        <strong>Total Decisions:</strong> {decisions.length}
      </div>
      <div>
        <strong>Categories:</strong> {Object.keys(categories).length}
      </div>
      <div>
        <strong>Nodes on Canvas:</strong> {nodes.length}
      </div>
      <div>
        <strong>Edges on Canvas:</strong> {edges.length}
      </div>
      <div>
        <strong>Completed Decisions:</strong> {completedDecisions.length}
      </div>
    </div>

    <h4>Categories</h4>
    <ul style={{ padding: '0 0 0 20px' }}>
      {Object.entries(categories).map(([category, items]) => (
        <li>
          {category}: {Array.isArray(items) ? items.length : 0} decisions
        </li>
      ))}
    </ul>
  </div>
</div>

<script>
  // Client-side code to update stats when props change
  function updateStats() {
    // This function would be called when props are updated
    // For now, we'll just rely on the component being re-rendered
    // when props change, as Astro handles this automatically
  }
</script>
