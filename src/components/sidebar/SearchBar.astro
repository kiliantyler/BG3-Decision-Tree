---
// SearchBar.astro - Search bar component for filtering decisions
interface Props {
  searchTerm?: string;
}

const { searchTerm = "" } = Astro.props;
---

<div class="search-container">
  <input
    type="text"
    placeholder="Search decisions..."
    value={searchTerm}
    class="search-input"
    id="decision-search-input"
  />
</div>

<style>
  .search-container {
    position: relative;
    width: 100%;
  }

  .search-input {
    width: 100%;
    padding: 8px;
    margin-bottom: 12px;
    border-radius: 4px;
    border: 1px solid var(--border);
    box-sizing: border-box;
    background-color: var(--selection);
    color: var(--foreground);
  }

  .search-input::placeholder {
    color: var(--comment);
    opacity: 0.8;
  }
</style>

<script>
  // Add event listener for search input
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('decision-search-input');

    if (searchInput) {
      // Listen for input events
      searchInput.addEventListener('input', (event) => {
        const target = event.target as HTMLInputElement;
        const searchTerm = target.value;

        // Update the search term in the parent component
        searchInput.dispatchEvent(new CustomEvent('search-term-change', {
          bubbles: true,
          detail: { searchTerm }
        }));

        // Find the closest parent with the data-search-term attribute
        const parent = searchInput.closest('[data-search-term]');
        if (parent) {
          parent.setAttribute('data-search-term', searchTerm);
        }
      });
    }
  });
</script>
