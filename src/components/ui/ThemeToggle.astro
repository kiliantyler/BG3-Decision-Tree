---
// ThemeToggle.astro - Theme toggle button component
import MoonIcon from '../icons/MoonIcon.astro';
import SunIcon from '../icons/SunIcon.astro';
import IconButton from './IconButton.astro';

// No props needed for this component
---

<div class="theme-toggle-container">
  <IconButton
    position="top-left"
    ariaLabel="Toggle theme"
    title="Theme Toggle"
    hoverBorderColor="var(--purple)"
    onClick="toggleTheme()"
  >
    <div id="theme-icon-container">
      <!-- Icons will be dynamically inserted by client script -->
      <div id="moon-icon" class="theme-icon">
        <MoonIcon />
      </div>
      <div id="sun-icon" class="theme-icon">
        <SunIcon />
      </div>
    </div>
  </IconButton>
</div>

<style>
  .theme-toggle-container {
    position: relative;
  }

  .theme-icon {
    display: none;
  }

  /* Show the appropriate icon based on the current theme */
  :global([data-theme="light"]) #moon-icon {
    display: block;
  }

  :global([data-theme="dark"]) #sun-icon {
    display: block;
  }
</style>

<script>
  // Declare the toggleTheme function on the window object
  declare global {
    interface Window {
      toggleTheme: () => void;
    }
  }

  // Client-side script to handle theme toggling
  function toggleTheme() {
    const html = document.documentElement;
    const currentTheme = html.getAttribute('data-theme') || 'light';
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';

    // Update the data-theme attribute
    html.setAttribute('data-theme', newTheme);

    // Save the theme preference to localStorage
    localStorage.setItem('theme', newTheme);

    // Apply theme colors from colorThemes.js
    applyThemeColors(newTheme);
  }

  // Function to apply theme colors from colorThemes.js
  function applyThemeColors(theme: string) {
    // This would normally come from colorThemes.js
    // For now, we'll use a simplified version
    const themes = {
      light: {
        background: '#f8f8f2',
        foreground: '#282a36',
        selection: '#44475a',
        comment: '#6272a4',
        purple: '#bd93f9',
        border: '#d8dee9',
        boxShadow: 'rgba(0, 0, 0, 0.1)',
        nodeBackground: '#ffffff',
        currentLine: '#f1f1f1',
      },
      dark: {
        background: '#282a36',
        foreground: '#f8f8f2',
        selection: '#44475a',
        comment: '#6272a4',
        purple: '#bd93f9',
        border: '#44475a',
        boxShadow: 'rgba(0, 0, 0, 0.3)',
        nodeBackground: '#383a59',
        currentLine: '#44475a',
      }
    };

    const currentTheme = themes[theme];

    // Apply theme colors to CSS variables
    Object.entries(currentTheme).forEach(([key, value]) => {
      document.documentElement.style.setProperty(`--${key}`, value);
    });

    // Force a repaint to ensure all styles are applied properly
    requestAnimationFrame(() => {
      document.body.style.display = 'none';
      // This triggers a reflow
      void document.body.offsetHeight;
      document.body.style.display = '';
    });
  }

  // Initialize theme on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Check for saved theme preference or use system preference
    const savedTheme = localStorage.getItem('theme');

    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      applyThemeColors(savedTheme as string);
    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      document.documentElement.setAttribute('data-theme', 'dark');
      applyThemeColors('dark');
    }

    // Listen for system theme changes
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    mediaQuery.addEventListener('change', e => {
      if (!localStorage.getItem('theme')) {
        const newTheme = e.matches ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', newTheme);
        applyThemeColors(newTheme);
      }
    });
  });

  // Make toggleTheme available globally
  window.toggleTheme = toggleTheme;
</script>
