---
// Modal.astro - A reusable modal component
interface Props {
  title?: string;
  message?: string;
  confirmText?: string;
  cancelText?: string;
  modalId?: string;
}

const {
  title = 'Confirm Action',
  message = 'Are you sure you want to proceed?',
  confirmText = 'Confirm',
  cancelText = 'Cancel',
  modalId = 'modal'
} = Astro.props;
---

<div id={modalId} class="modal-overlay" style="display: none;">
  <div class="modal-container">
    <div class="modal-header">
      <h3>{title}</h3>
    </div>
    <div class="modal-body">
      <p>{message}</p>
    </div>
    <div class="modal-footer">
      <button id={`${modalId}-cancel`} class="modal-cancel-button">
        {cancelText}
      </button>
      <button id={`${modalId}-confirm`} class="modal-confirm-button">
        {confirmText}
      </button>
    </div>
  </div>
</div>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .modal-container {
    position: relative;
    background-color: var(--nodeBackground);
    color: var(--foreground);
    border-radius: 8px;
    padding: 16px;
    box-shadow: 0 4px 12px var(--boxShadowDarker);
    min-width: 250px;
    max-width: 350px;
    border: 1px solid var(--border);
  }

  :global([data-theme="dark"]) .modal-container {
    background-color: var(--currentLine);
  }

  .modal-header h3 {
    color: var(--red);
    margin-top: 0;
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 8px;
    margin-top: 16px;
  }

  .modal-cancel-button {
    padding: 8px 16px;
    background-color: var(--buttonBackground);
    color: var(--buttonText);
    border: 1px solid var(--buttonBorder);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .modal-confirm-button {
    padding: 8px 16px;
    background-color: var(--red);
    color: var(--badgeText);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .modal-cancel-button:hover,
  .modal-confirm-button:hover {
    transform: scale(1.05);
  }
</style>

<script define:vars={{ modalId }}>
  // Client-side script to handle modal interactions
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById(modalId);
    const cancelButton = document.getElementById(`${modalId}-cancel`);
    const confirmButton = document.getElementById(`${modalId}-confirm`);

    if (modal && cancelButton && confirmButton) {
      // Close modal when clicking cancel
      cancelButton.addEventListener('click', () => {
        modal.style.display = 'none';
        // Dispatch a custom event for the cancel action
        modal.dispatchEvent(new CustomEvent('modal-cancel'));
      });

      // Handle confirm action
      confirmButton.addEventListener('click', () => {
        modal.style.display = 'none';
        // Dispatch a custom event for the confirm action
        modal.dispatchEvent(new CustomEvent('modal-confirm'));
      });

      // Close modal when clicking outside
      modal.addEventListener('click', (event) => {
        if (event.target === modal) {
          modal.style.display = 'none';
          // Dispatch a custom event for the cancel action
          modal.dispatchEvent(new CustomEvent('modal-cancel'));
        }
      });

      // Close modal when pressing Escape
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && modal.style.display !== 'none') {
          modal.style.display = 'none';
          // Dispatch a custom event for the cancel action
          modal.dispatchEvent(new CustomEvent('modal-cancel'));
        }
      });
    }
  });

  // Expose a global function to show the modal
  window.showModal = (id) => {
    const modal = document.getElementById(id);
    if (modal) {
      modal.style.display = 'flex';
    }
  };
</script>
